class RectCorrectError(Exception):
    # определяем пользовательское исключение для некорректных прямоугольников
    pass
def isCorrectRect(rect):
    # проверяем, что список содержит ровно два элемента (кортежа)
    if len(rect) != 2:
        return False
    # извлекаем координаты из переданных кортежей
    (x1, y1), (x2, y2) = rect
    # проверяем, что координаты левого нижнего угла меньше координат верхнего правого угла
    return x1 < x2 and y1 < y2
def isCollisionRect(rect1, rect2):
    # проверяем корректность первого прямоугольника
    if not isCorrectRect(rect1):
        raise RectCorrectError("1й прямоугольник некоректный")
    # проверяем корректность второго прямоугольника
    if not isCorrectRect(rect2):
        raise RectCorrectError("2й прямоугольник некоректный")
    # извлекаем координаты углов прямоугольников
    (x1_min, y1_min), (x1_max, y1_max) = rect1
    (x2_min, y2_min), (x2_max, y2_max) = rect2
    # проверяем, пересекаются ли прямоугольники
    # прямоугольники не пересекаются, если один из них находится полностью левее, правее, ниже или выше другого
    return not (x1_max < x2_min or x2_max < x1_min or y1_max < y2_min or y2_max < y1_min)
# примеры использования
try:
    # проверка пересечения двух корректных прямоугольников, которые пересекаются
    print(isCollisionRect([(-3.4, 1), (9.2, 10)], [(-7.4, 0), (13.2, 12)]))  # вернет True
    # проверка пересечения двух корректных прямоугольников, которые не пересекаются
    print(isCollisionRect([(1, 1), (2, 2)], [(3, 0), (13, 1)]))  # вернет False
    # проверка пересечения некорректного прямоугольника
    print(isCollisionRect([(1, 1), (2, 2)], [(3, 17), (13, 1)]))  # ожидается ошибка
except RectCorrectError as e:
    # вывод сообщения об ошибке
    print(e)